diff --git a/app/api/monobank/jars/route.ts b/app/api/monobank/jars/route.ts
new file mode 100644
--- /dev/null
+++ b/app/api/monobank/jars/route.ts
@@
+import { NextResponse } from "next/server";
+
+export const runtime = "nodejs";
+
+interface JarInfo {
+  id: string;
+  title: string;
+  goal: number;
+  balance: number;
+}
+
+export async function POST(req: Request) {
+  try {
+    const body = await req.json();
+    const token: unknown = body?.token;
+    if (!token || typeof token !== "string") {
+      return NextResponse.json(
+        { error: "Треба вказати токен Monobank." },
+        { status: 400 },
+      );
+    }
+    const res = await fetch("https://api.monobank.ua/personal/client-info", {
+      headers: {
+        "X-Token": token,
+      },
+      cache: "no-store",
+    });
+    if (!res.ok) {
+      const text = await res.text();
+      return NextResponse.json(
+        { error: `Не вдалося отримати банки: ${res.status} ${text}` },
+        { status: res.status },
+      );
+    }
+    const json = await res.json();
+    let jars: JarInfo[] = [];
+    if (Array.isArray(json?.jars)) {
+      jars = json.jars.map((j: any) => {
+        const id: string = j?.id ?? j?.jarId ?? "";
+        const title: string = j?.title ?? j?.description ?? "";
+        const goal: number =
+          (typeof j?.goal === "number" ? j.goal : undefined) ??
+          (typeof j?.goalSum === "number" ? j.goalSum : undefined) ??
+          0;
+        const balRaw =
+          (typeof j?.balance === "number" ? j.balance : undefined) ??
+          (typeof j?.currentBalance === "number"
+            ? j.currentBalance
+            : undefined) ?? 0;
+        const balance: number = Math.round(balRaw) / 100;
+        return { id, title, goal, balance } as JarInfo;
+      });
+    }
+    return NextResponse.json({ jars });
+  } catch {
+    return NextResponse.json(
+      { error: "Внутрішня помилка сервера." },
+      { status: 500 },
+    );
+  }
+}
diff --git a/app/api/monobank/save-token/route.ts b/app/api/monobank/save-token/route.ts
new file mode 100644
--- /dev/null
+++ b/app/api/monobank/save-token/route.ts
@@
+import { NextResponse } from "next/server";
+import { getAuthSession } from "@/lib/auth";
+import { setSetting } from "@/lib/store";
+
+export const runtime = "nodejs";
+
+export async function POST(req: Request) {
+  try {
+    const session = await getAuthSession();
+    if (!session || session.user?.role !== "streamer") {
+      return NextResponse.json(
+        { error: "Немає доступу." },
+        { status: 401 },
+      );
+    }
+    const body = await req.json();
+    const token: unknown = body?.token;
+    if (!token || typeof token !== "string") {
+      return NextResponse.json(
+        { error: "Токен обов'язковий." },
+        { status: 400 },
+      );
+    }
+    await setSetting("monobankToken" as any, token as any);
+    return NextResponse.json({ ok: true });
+  } catch {
+    return NextResponse.json(
+      { error: "Внутрішня помилка сервера." },
+      { status: 500 },
+    );
+  }
+}
diff --git a/app/api/monobank/connect-jar/route.ts b/app/api/monobank/connect-jar/route.ts
new file mode 100644
--- /dev/null
+++ b/app/api/monobank/connect-jar/route.ts
@@
+import { NextResponse } from "next/server";
+import { getAuthSession } from "@/lib/auth";
+import { setSetting } from "@/lib/store";
+import { configureWebhook } from "@/lib/monobank-webhook";
+
+export const runtime = "nodejs";
+
+export async function POST(req: Request) {
+  try {
+    const session = await getAuthSession();
+    if (!session || session.user?.role !== "streamer") {
+      return NextResponse.json(
+        { error: "Немає доступу." },
+        { status: 401 },
+      );
+    }
+    const body = await req.json();
+    const jarId: unknown = body?.jarId;
+    if (!jarId || typeof jarId !== "string") {
+      return NextResponse.json(
+        { error: "Потрібно вибрати банку." },
+        { status: 400 },
+      );
+    }
+    await setSetting("jarId" as any, jarId as any);
+    const proto = req.headers.get("x-forwarded-proto") ?? "http";
+    const host = req.headers.get("host") ?? "localhost";
+    const webhookUrl = `${proto}://${host}/api/monobank/webhook`;
+    await setSetting("monobankWebhookUrl" as any, webhookUrl as any);
+    try {
+      await configureWebhook(webhookUrl);
+    } catch {
+      /* ignore */
+    }
+    const username =
+      session.user?.name ?? (session.user?.id as string) ?? "streamer";
+    const slug = username
+      .toLowerCase()
+      .trim()
+      .replace(/[^a-z0-9]+/g, "_")
+      .replace(/^_+|_+$/g, "");
+    const donationUrl = `${proto}://${host}/${slug}`;
+    return NextResponse.json({ ok: true, donationUrl });
+  } catch {
+    return NextResponse.json(
+      { error: "Внутрішня помилка сервера." },
+      { status: 500 },
+    );
+  }
+}
diff --git a/app/panel/monobank-client.tsx b/app/panel/monobank-client.tsx
new file mode 100644
--- /dev/null
+++ b/app/panel/monobank-client.tsx
@@
+"use client";
+
+import { useState } from "react";
+
+interface Jar {
+  id: string;
+  title: string;
+  goal: number;
+  balance: number;
+}
+
+export function MonobankClient() {
+  const [expanded, setExpanded] = useState(false);
+  const [token, setToken] = useState("");
+  const [jars, setJars] = useState<Jar[]>([]);
+  const [selectedJar, setSelectedJar] = useState<string | null>(null);
+  const [loading, setLoading] = useState(false);
+  const [message, setMessage] = useState<string | null>(null);
+
+  async function handleGetData() {
+    setMessage(null);
+    if (!token) {
+      setMessage("Будь ласка, введіть токен.");
+      return;
+    }
+    setLoading(true);
+    try {
+      const jarsRes = await fetch("/api/monobank/jars", {
+        method: "POST",
+        headers: { "Content-Type": "application/json" },
+        body: JSON.stringify({ token }),
+      });
+      const jarsData = await jarsRes.json();
+      if (!jarsRes.ok) {
+        setMessage(jarsData?.error || "Помилка при отриманні банок.");
+        setJars([]);
+        return;
+      }
+      const list: Jar[] = jarsData?.jars ?? [];
+      setJars(list);
+      setSelectedJar(list.length > 0 ? list[0].id : null);
+      await fetch("/api/monobank/save-token", {
+        method: "POST",
+        headers: { "Content-Type": "application/json" },
+        body: JSON.stringify({ token }),
+      });
+    } catch (err) {
+      setMessage((err as Error).message);
+    } finally {
+      setLoading(false);
+    }
+  }
+
+  async function handleConnect() {
+    setMessage(null);
+    if (!selectedJar) {
+      setMessage("Потрібно вибрати банку.");
+      return;
+    }
+    setLoading(true);
+    try {
+      const res = await fetch("/api/monobank/connect-jar", {
+        method: "POST",
+        headers: { "Content-Type": "application/json" },
+        body: JSON.stringify({ jarId: selectedJar }),
+      });
+      const data = await res.json();
+      if (!res.ok) {
+        setMessage(data?.error || "Не вдалося підключити банку.");
+      } else {
+        setMessage(
+          data?.donationUrl
+            ? `Підключено! Посилання для донатів: ${data.donationUrl}`
+            : "Банка підключена.",
+        );
+      }
+    } catch (err) {
+      setMessage((err as Error).message);
+    } finally {
+      setLoading(false);
+    }
+  }
+
+  return (
+    <div className="mt-6 bg-neutral-900 rounded-lg p-6 text-neutral-100">
+      <div className="flex items-center justify-between">
+        <div>
+          <h2 className="text-lg font-semibold">Налаштування Monobank</h2>
+          <p className="text-sm text-neutral-400">Visa | Mastercard</p>
+          <p className="text-xs text-neutral-500 mt-1">
+            Комісія системи 0%. Донат від 10 до 29 999 грн.
+          </p>
+        </div>
+        <div className="relative inline-flex h-6 w-11 cursor-pointer rounded-full bg-neutral-700 transition-colors">
+          <span className="absolute left-1 top-1 inline-block h-4 w-4 transform rounded-full bg-brand-500 transition-transform"></span>
+        </div>
+      </div>
+      {!expanded && (
+        <div className="mt-6">
+          <button
+            type="button"
+            className="inline-flex items-center justify-center rounded-md bg-brand-500 px-4 py-2 text-sm font-medium text-white hover:bg-brand-600 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-brand-500"
+            onClick={() => setExpanded(true)}
+          >
+            Підключити банку
+          </button>
+        </div>
+      )}
+      {expanded && (
+        <div className="mt-6 space-y-4">
+          <div>
+            <label className="block text-sm font-medium mb-1" htmlFor="mono-token">
+              Токен Mono
+            </label>
+            <div className="flex items-center gap-2">
+              <input
+                id="mono-token"
+                type="text"
+                className="flex-1 rounded-md border border-neutral-700 bg-neutral-800 px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-brand-500"
+                value={token}
+                onChange={(e) => setToken(e.target.value)}
+                placeholder="Введіть особистий API токен"
+              />
+              <button
+                type="button"
+                onClick={handleGetData}
+                className="rounded-md bg-brand-500 px-3 py-2 text-sm font-medium text-white hover:bg-brand-600 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-brand-500"
+                disabled={loading}
+              >
+                Отримати дані
+              </button>
+            </div>
+            <p className="mt-2 text-xs text-neutral-500">
+              Токен можна отримати на сайті <a href="https://api.monobank.ua" target="_blank" rel="noopener noreferrer" className="underline">api.monobank.ua</a>.
+              Токен використовується тільки у браузері, щоб отримати список банок і створити безпечний вебхук на наш сервіс. Ми не зберігаємо токен у відкритому вигляді.
+            </p>
+          </div>
+          {jars.length > 0 && (
+            <div className="space-y-2">
+              {jars.map((jar) => (
+                <label
+                  key={jar.id}
+                  className="flex cursor-pointer items-center justify-between rounded-md border border-neutral-700 bg-neutral-800 p-4 hover:border-brand-500"
+                >
+                  <div>
+                    <p className="text-sm font-medium">
+                      {jar.title || "Невідома банка"}
+                    </p>
+                    <p className="text-xs text-neutral-400 mt-1">
+                      Ціль: {jar.goal.toLocaleString()} ₴
+                    </p>
+                    <p className="text-xs text-neutral-400">
+                      Баланс: {jar.balance.toLocaleString()} ₴
+                    </p>
+                  </div>
+                  <input
+                    type="radio"
+                    name="jar"
+                    value={jar.id}
+                    checked={selectedJar === jar.id}
+                    onChange={() => setSelectedJar(jar.id)}
+                    className="h-4 w-4 text-brand-500 focus:ring-brand-500 border-neutral-600"
+                  />
+                </label>
+              ))}
+            </div>
+          )}
+          {jars.length > 0 && (
+            <div>
+              <button
+                type="button"
+                onClick={handleConnect}
+                className="w-full rounded-md bg-brand-500 px-4 py-2 text-sm font-medium text-white hover:bg-brand-600 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-brand-500"
+                disabled={loading}
+              >
+                Підключити
+              </button>
+            </div>
+          )}
+          {message && (
+            <div className="mt-4 rounded-md bg-neutral-800 p-3 text-sm text-yellow-400">
+              {message}
+            </div>
+          )}
+        </div>
+      )}
+    </div>
+  );
+}
diff --git a/app/panel/page.tsx b/app/panel/page.tsx
deleted file mode 100644
--- a/app/panel/page.tsx
+++ /dev/null
diff --git a/app/panel/page.tsx b/app/panel/page.tsx
new file mode 100644
--- /dev/null
+++ b/app/panel/page.tsx
@@
+import { Suspense } from "react";
+import { headers } from "next/headers";
+import { redirect } from "next/navigation";
+import { getAuthSession } from "@/lib/auth";
+import { StatusClient, type StatusData } from "./status-client";
+import { MonobankClient } from "./monobank-client";
+
+export default async function PanelPage() {
+  const session = await getAuthSession();
+  if (!session || session.user?.role !== "streamer") {
+    redirect("/login");
+  }
+  const h = headers();
+  const proto = h.get("x-forwarded-proto") ?? "http";
+  const host = h.get("host") ?? "localhost";
+  const res = await fetch(`${proto}://${host}/api/monobank/status`, {
+    cache: "no-store",
+  });
+  const status: StatusData = await res.json();
+  return (
+    <div className="max-w-2xl mx-auto p-4">
+      <h1 className="mb-4 text-2xl font-bold text-white">
+        Налаштування Monobank
+      </h1>
+      <div className="mb-6">
+        <Suspense fallback={<div>Loading…</div>}>
+          <StatusClient initial={status} />
+        </Suspense>
+      </div>
+      <MonobankClient />
+    </div>
+  );
+}
