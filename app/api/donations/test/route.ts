import { NextRequest, NextResponse } from "next/server";
import { getServerSession } from "next-auth/next";
import { authOptions } from "@/lib/auth";
import { appendDonationEvent, getMonobankSettings } from "@/lib/store";
import { prisma } from "@/lib/db";
import { broadcastDonation } from "@/lib/sse";

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);
    if (!(session as any)?.user?.id) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    const userId = (session as any).user.id;
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
    const user = await prisma.user.findUnique({
      where: { id: userId }
    });
    
    if (!user) {
      return NextResponse.json({ 
        error: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π" 
      }, { status: 404 });
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –ø—ñ–¥–∫–ª—é—á–µ–Ω–∞ –±–∞–Ω–∫–∞
    const settings = await getMonobankSettings(userId);
    if (!settings?.jarId) {
      return NextResponse.json({ 
        error: "–°–ø–æ—á–∞—Ç–∫—É –ø—ñ–¥–∫–ª—é—á—ñ—Ç—å –±–∞–Ω–∫—É –¥–ª—è –¥–æ–Ω–∞—Ç—ñ–≤" 
      }, { status: 400 });
    }

    // –ì–µ–Ω–µ—Ä—É—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—ñ –¥–∞–Ω—ñ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–æ–Ω–∞—Ç—É
    const testMessages = [
      "–î—è–∫—É—é –∑–∞ —Å—Ç—Ä—ñ–º! üíú",
      "–ü—Ä–æ–¥–æ–≤–∂—É–π –≤ —Ç–æ–º—É –∂ –¥—É—Å—ñ! üî•",
      "–¢–µ—Å—Ç–æ–≤–∏–π –¥–æ–Ω–∞—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏",
      "–ü—ñ–¥—Ç—Ä–∏–º—É—é –∫–∞–Ω–∞–ª! üöÄ",
      "–ö—Ä—É—Ç–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç! üëç",
      "–£–¥–∞—á—ñ –≤ —Ä–æ–∑–≤–∏—Ç–∫—É! ‚≠ê",
      "–¢—Ä–∏–º–∞–π –Ω–∞ —Ä–æ–∑–≤–∏—Ç–æ–∫! üí™",
      "–ö–ª–∞—Å–Ω–∏–π —Å—Ç—Ä—ñ–º–µ—Ä! üéÆ"
    ];

    const testNicknames = [
      "TestDonator", "–ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞—á", "–ì–ª—è–¥–∞—á123", "FanOfStream", 
      "Helper2024", "StreamLover", "–î–æ–Ω–∞—Ç–µ—Ä", "Support_User"
    ];

    const testAmounts = [10, 25, 50, 100, 150, 200, 500];

    const randomMessage = testMessages[Math.floor(Math.random() * testMessages.length)];
    const randomNickname = testNicknames[Math.floor(Math.random() * testNicknames.length)];
    const randomAmount = testAmounts[Math.floor(Math.random() * testAmounts.length)];

    // –ì–µ–Ω–µ—Ä—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π identifier –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–æ–Ω–∞—Ç—É
    const testIdentifier = `test-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;

    // –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—é—î–º–æ DonationIntent –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–æ–Ω–∞—Ç—É
    await prisma.donationIntent.create({
      data: {
        identifier: testIdentifier,
        nickname: randomNickname,
        message: randomMessage,
        amount: randomAmount,
        streamerId: userId,
        createdAt: new Date()
      }
    });

    // –¢–µ–ø–µ—Ä —Å—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π –¥–æ–Ω–∞—Ç –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    await appendDonationEvent({
      identifier: testIdentifier,
      nickname: randomNickname,
      message: randomMessage,
      amount: randomAmount,
      monoComment: `–¢–µ—Å—Ç–æ–≤–∏–π –¥–æ–Ω–∞—Ç ${randomAmount}‚Ç¥`,
      jarTitle: settings.jarTitle || "–ë–∞–Ω–∫–∞ Monobank", // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞–∑–≤—É –±–∞–Ω–∫–∏ –Ω–∞ –º–æ–º–µ–Ω—Ç –¥–æ–Ω–∞—Ç—É
      streamerId: userId,
      createdAt: new Date()
    });

    // –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    const donationEvent = {
      id: Date.now(), // –ü—Ä–æ—Å—Ç–∏–π ID –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
      identifier: testIdentifier,
      nickname: randomNickname,
      message: randomMessage,
      amount: randomAmount,
      monoComment: `–¢–µ—Å—Ç–æ–≤–∏–π –¥–æ–Ω–∞—Ç ${randomAmount}‚Ç¥`,
      jarTitle: settings.jarTitle || "–ë–∞–Ω–∫–∞ Monobank",
      streamerId: userId,
      createdAt: new Date()
    };

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —É –≤—ñ–¥–∂–µ—Ç —á–µ—Ä–µ–∑ SSE
    const ssePayload = {
      identifier: testIdentifier,
      nickname: randomNickname,
      message: randomMessage,
      amount: randomAmount,
      monoComment: `–¢–µ—Å—Ç–æ–≤–∏–π –¥–æ–Ω–∞—Ç ${randomAmount}‚Ç¥`,
      jarTitle: settings.jarTitle || "–ë–∞–Ω–∫–∞ Monobank",
      createdAt: donationEvent.createdAt.toISOString(),
      streamerId: userId
    };
    
    console.log('Broadcasting test donation:', ssePayload);
    broadcastDonation(ssePayload);

    return NextResponse.json({ 
      success: true, 
      donation: {
        ...donationEvent,
        createdAt: donationEvent.createdAt.toISOString()
      }
    });

  } catch (error) {
    console.error("Test donation creation failed:", error);
    return NextResponse.json(
      { error: "Failed to create test donation" },
      { status: 500 }
    );
  }
}
