import { NextRequest, NextResponse } from "next/server";
import { getAuthSession } from "@/lib/auth";
import { prisma } from "@/lib/db";
import { broadcastDonation } from "@/lib/sse";

export async function POST(request: NextRequest) {
  try {
    const session = await getAuthSession();
    if (!session?.user || !('role' in session.user) || session.user.role !== "streamer") {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }
    
    const userId = 'id' in session.user ? session.user.id : '';
    if (!userId) {
      return NextResponse.json({ error: "User ID not found" }, { status: 400 });
    }

    const body = await request.json();
    const { donationId } = body;

    if (!donationId) {
      return NextResponse.json({ error: "Donation ID required" }, { status: 400 });
    }

    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –¥–æ–Ω–∞—Ç –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    const donation = await prisma.donationEvent.findFirst({
      where: {
        id: donationId,
        streamerId: userId,
        youtubeUrl: { not: null } // –¢—ñ–ª—å–∫–∏ –¥–æ–Ω–∞—Ç–∏ –∑ YouTube –≤—ñ–¥–µ–æ
      }
    });

    if (!donation || !donation.youtubeUrl) {
      return NextResponse.json({ error: "Donation with YouTube video not found" }, { status: 404 });
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ SSE payload –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è
    const ssePayload = {
      identifier: `replay-${donation.identifier}-${Date.now()}`, // –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä—É
      nickname: donation.nickname,
      message: donation.message,
      amount: donation.amount,
      monoComment: donation.monoComment,
      youtubeUrl: donation.youtubeUrl,
      jarTitle: donation.jarTitle,
      createdAt: new Date().toISOString(), // –ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∫–∞–∑—É
      streamerId: userId
    };

    console.log('üîÑ Broadcasting YouTube video replay:', {
      donationId,
      youtubeUrl: donation.youtubeUrl,
      nickname: donation.nickname
    });

    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–¥—ñ—é –ø–æ–≤—Ç–æ—Ä—É
    broadcastDonation(ssePayload);

    return NextResponse.json({ 
      success: true, 
      message: "YouTube –≤—ñ–¥–µ–æ –¥–æ–¥–∞–Ω–æ –¥–æ —á–µ—Ä–≥–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è" 
    });

  } catch (error) {
    console.error("Failed to replay YouTube video:", error);
    return NextResponse.json({ error: "Internal server error" }, { status: 500 });
  }
}

