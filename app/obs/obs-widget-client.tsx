"use client";

import { useCallback, useEffect, useRef, useState } from "react";

interface EventPayload {
  identifier: string;
  nickname: string;
  message: string;
  amount: number;
  createdAt: string;
}

type ConnectionState = "connecting" | "connected" | "error";

interface ObsWidgetClientProps {
  streamerId?: string;
}

export function ObsWidgetClient({ streamerId }: ObsWidgetClientProps = {}) {
  const [visible, setVisible] = useState(false);
  const [data, setData] = useState<EventPayload | null>(null);
  const [voiceName, setVoiceName] = useState("");
  const [connectionState, setConnectionState] =
    useState<ConnectionState>("connecting");
  const [showAudioPrompt, setShowAudioPrompt] = useState(false);
  const [debugMode, setDebugMode] = useState(false);
  const [donationsPaused, setDonationsPaused] = useState(false);
  const audioAllowedRef = useRef(false);
  const queueRef = useRef<EventPayload[]>([]);
  const playingRef = useRef(false);
  const timeoutRef = useRef<ReturnType<typeof setTimeout> | null>(null);
  const reconnectTimeoutRef = useRef<ReturnType<typeof setTimeout> | null>(null);
  const pauseCheckRef = useRef<ReturnType<typeof setInterval> | null>(null);

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞–Ω—É –ø–∞—É–∑–∏
  const checkPauseState = useCallback(async () => {
    try {
      const response = await fetch('/api/donations/pause');
      if (response.ok) {
        const data = await response.json();
        setDonationsPaused(data.paused);
        console.log("üìä Pause state checked:", data.paused);
      }
    } catch (error) {
      console.error("Failed to check pause state:", error);
    }
  }, []);

  const playNext = useCallback(() => {
    console.log("üé¨ playNext() called");
    console.log("üìä Current queue length:", queueRef.current.length);
    console.log("‚è∏Ô∏è Donations paused:", donationsPaused);
    
    // –û—á–∏—â–∞—î–º–æ —Ç–∞–π–º–µ—Ä, —è–∫—â–æ –≤—ñ–Ω –∞–∫—Ç–∏–≤–Ω–∏–π
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current);
      timeoutRef.current = null;
    }
    
    // –Ø–∫—â–æ –¥–æ–Ω–∞—Ç–∏ –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω—ñ, –Ω–µ –≤—ñ–¥—Ç–≤–æ—Ä—é—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π
    if (donationsPaused) {
      console.log("‚è∏Ô∏è Donations are paused, not playing next donation");
      playingRef.current = false; // –û–±–æ–≤'—è–∑–∫–æ–≤–æ —Å–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω
      return;
    }
    
    const next = queueRef.current.shift();
    if (!next) {
      console.log("‚ùå No items in queue, returning");
      playingRef.current = false; // –û–±–æ–≤'—è–∑–∫–æ–≤–æ —Å–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω
      return;
    }
    
    console.log("üéØ Processing donation:", next);
    
    setData(next);
    playingRef.current = true;
    
    const text = `${next.nickname} –∑–∞–¥–æ–Ω–∞—Ç–∏–≤ ${Math.round(next.amount)} –≥—Ä–∏–≤–µ–Ω—å... ${next.message}`;
    const src = `/api/tts?voice=${encodeURIComponent(voiceName)}&text=${encodeURIComponent(text)}&quality=optimal`;
    
    console.log(`üéµ Loading TTS for donation notification:`, {
      nickname: next.nickname,
      amount: next.amount,
      message: next.message,
      text: text,
      audioAllowed: audioAllowedRef.current,
      ttsUrl: src
    });
    
    console.log("üîä Creating Audio object with URL:", src);
    const audio = new Audio();
    audio.preload = 'auto'; // –ü–æ–≤–Ω–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—è –±—É—Ñ–µ—Ä–∏–∑–∞—Ü—ñ—è
    audio.crossOrigin = 'anonymous'; // –î–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ—ó —Ä–æ–±–æ—Ç–∏ CORS
    audio.volume = 0.01; // –ü–æ—á–∏–Ω–∞—î–º–æ –∑ –¥—É–∂–µ —Ç–∏—Ö–æ—ó –≥—É—á–Ω–æ—Å—Ç—ñ –¥–ª—è fade-in –µ—Ñ–µ–∫—Ç—É
    
    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –∫—Ä–∞—â–æ—ó —è–∫–æ—Å—Ç—ñ –∑–≤—É–∫—É —Ç–∞ –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –ø–æ—Ç—Ä—ñ—Å–∫—É–≤–∞–Ω–Ω—é
    if ('mozCurrentSampleOffset' in audio) {
      // Firefox specific optimizations
      (audio as any).mozAudioChannelType = 'content';
    }
    
    // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è
    if ('webkitAudioContext' in window || 'AudioContext' in window) {
      audio.preservesPitch = false; // –ú–æ–∂–µ –∑–º–µ–Ω—à–∏—Ç–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∏
      // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –±—É—Ñ–µ—Ä–∏–∑–∞—Ü—ñ—é –¥–ª—è –∫—Ä–∞—â–æ—ó —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ
      if ('setPlaybackRate' in audio) {
        (audio as any).mozPreservesPitch = false;
      }
    }
    
    audio.src = src;
    
    // –¢–∞–π–º–∞—É—Ç –±–µ–∑–ø–µ–∫–∏ - –ø–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥–∏ –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ TTS –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç—å—Å—è
    const safetyTimeout = setTimeout(() => {
      console.log("‚è∞ Safety timeout - showing notification without waiting for TTS");
      setVisible(true);
    }, 3000);
    
    // –û—á–∏—â–∞—î–º–æ —Ç–∞–π–º–∞—É—Ç –±–µ–∑–ø–µ–∫–∏ –ø—Ä–∏ —É—Å–ø—ñ—à–Ω–æ–º—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
    const clearSafetyTimeout = () => {
      if (safetyTimeout) {
        clearTimeout(safetyTimeout);
      }
    };
    
    // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –ø—Ä–∏–±–ª–∏–∑–Ω—É —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Ç–µ–∫—Å—Ç—É –¥–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ TTS
    const calculateEstimatedDuration = (text: string): number => {
      // –î–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ TTS —Å–µ—Ä–µ–¥–Ω—è —à–≤–∏–¥–∫—ñ—Å—Ç—å ~140-160 —Å–ª—ñ–≤/—Ö–≤–∏–ª–∏–Ω—É
      const words = text.split(/\s+/).filter(word => word.length > 0).length;
      const wordsPerMinute = 150;
      
      // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∞—É–∑–∏ –¥–ª—è —Ü–∏—Ñ—Ä, —Ä–æ–∑–¥—ñ–ª–æ–≤–∏—Ö –∑–Ω–∞–∫—ñ–≤
      const numbers = (text.match(/\d+/g) || []).length;
      const punctuation = (text.match(/[.,!?;:]/g) || []).length;
      
      // –ë–∞–∑–æ–≤–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å + –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π —á–∞—Å –Ω–∞ —Ü–∏—Ñ—Ä–∏ —Ç–∞ –ø—É–Ω–∫—Ç—É–∞—Ü—ñ—é
      const baseDuration = (words / wordsPerMinute) * 60 * 1000;
      const extraTime = (numbers * 500) + (punctuation * 200); // 0.5—Å –Ω–∞ —Ü–∏—Ñ—Ä—É, 0.2—Å –Ω–∞ —Ä–æ–∑–¥—ñ–ª–æ–≤–∏–π –∑–Ω–∞–∫
      
      return Math.max(2500, baseDuration + extraTime); // –º—ñ–Ω—ñ–º—É–º 2.5 —Å–µ–∫—É–Ω–¥–∏
    };
    
    const estimatedDuration = calculateEstimatedDuration(text);
    const displayDuration = estimatedDuration + 1000; // + 1 —Å–µ–∫—É–Ω–¥–∞ —è–∫ –∑–∞–ø–∏—Ç—É–≤–∞–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
    
    const finish = () => {
      setVisible(false);
      // –ù–ï —Å–∫–∏–¥–∞—î–º–æ playingRef.current = false —Ç—É—Ç, —â–æ–± –∑–∞–ø–æ–±—ñ–≥—Ç–∏ race condition
      // –û—á–∏—Å—Ç–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ç–∞–π–º–µ—Ä —è–∫—â–æ –≤—ñ–Ω —ñ—Å–Ω—É—î
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
      }
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞–Ω –ø–∞—É–∑–∏ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –¥–æ–Ω–∞—Ç—É
      timeoutRef.current = setTimeout(() => {
        // –û—á–∏—â–∞—î–º–æ —Ç–∞–π–º–µ—Ä —Ç–∞ —Å–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è
        timeoutRef.current = null;
        playingRef.current = false;
        if (!donationsPaused) {
          playNext();
        } else {
          console.log("‚è∏Ô∏è Donations paused, not starting next donation");
        }
      }, 2000);
    };
    
    let audioStartTime = 0;
    let audioDuration = 0;
    
    audio.addEventListener("loadedmetadata", () => {
      // –û—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–∞–ª—å–Ω—É —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –∞—É–¥—ñ–æ —Ñ–∞–π–ª—É
      audioDuration = audio.duration * 1000; // –ø–µ—Ä–µ–≤–æ–¥–∏–º–æ –≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∏
      console.log(`Audio duration: ${audioDuration}ms, estimated: ${estimatedDuration}ms`);
    });
    
    audio.addEventListener("loadstart", () => {
      console.log(`Loading TTS audio from: ${src}`);
    });
    
    audio.addEventListener("canplaythrough", () => {
      console.log(`‚úÖ TTS audio fully buffered - preparing for smooth playback`);
      clearSafetyTimeout(); // –û—á–∏—â–∞—î–º–æ —Ç–∞–π–º–∞—É—Ç –±–µ–∑–ø–µ–∫–∏
      
      // –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –¥–ª—è —Å—Ç–∞–±—ñ–ª—ñ–∑–∞—Ü—ñ—ó –∞—É–¥—ñ–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
      setTimeout(() => {
        setVisible(true); // –ü–æ–∫–∞–∑—É—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—ñ—Å–ª—è —Å—Ç–∞–±—ñ–ª—ñ–∑–∞—Ü—ñ—ó
      }, 50);
    });
    
    // –°–ø—Ä–æ—â–µ–Ω–∞ –ª–æ–≥—ñ–∫–∞ - –∑–∞–≤–∂–¥–∏ —Å–ø—Ä–æ–±—É—î–º–æ –≤—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏ –∞—É–¥—ñ–æ
    let audioPlayPromise: Promise<void> | null = null;
    
    audio.addEventListener("play", () => {
      audioStartTime = Date.now();
      console.log("üéµ TTS audio started playing");
    });
    
    audio.addEventListener("ended", () => {
      const actualPlayTime = Date.now() - audioStartTime;
      const remainingTime = Math.max(1000, displayDuration - actualPlayTime);
      console.log(`üèÅ TTS finished, showing notification for ${remainingTime}ms more`);
      setTimeout(finish, remainingTime);
    }, { once: true });
    
    audio.addEventListener("error", (err) => {
      console.error("‚ùå TTS audio error:", err);
      console.log("üîá Showing notification without TTS due to audio error");
      clearSafetyTimeout(); // –û—á–∏—â–∞—î–º–æ —Ç–∞–π–º–∞—É—Ç –±–µ–∑–ø–µ–∫–∏
      setVisible(true); // –ü–æ–∫–∞–∑—É—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ TTS –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç—å—Å—è
      setTimeout(finish, displayDuration);
    }, { once: true });
    
    // –ó–∞–≤–∂–¥–∏ –Ω–∞–º–∞–≥–∞—î–º–æ—Å—è –≤—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏ –∞—É–¥—ñ–æ
    console.log(`‚ñ∂Ô∏è Attempting to play TTS audio. URL: ${src}`);
    
    const attemptPlay = async () => {
      try {
        // –ê–∫—Ç–∏–≤—É—î–º–æ AudioContext —Å–ø–æ—á–∞—Ç–∫—É –¥–ª—è –∫—Ä–∞—â–æ—ó —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ
        try {
          const AudioContext = window.AudioContext || (window as any).webkitAudioContext;
          if (AudioContext) {
            const audioContext = new AudioContext();
            if (audioContext.state === 'suspended') {
              await audioContext.resume();
              console.log("üéõÔ∏è AudioContext –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –ø–µ—Ä–µ–¥ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è–º");
            }
          }
        } catch (contextErr) {
          console.log("üéõÔ∏è AudioContext activation warning:", contextErr);
        }
        
        // –ü–æ—á–∞—Ç–∏ –∑ –¥—É–∂–µ —Ç–∏—Ö–æ—ó –≥—É—á–Ω–æ—Å—Ç—ñ –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ fade-in
        audio.volume = 0.01;
        audio.muted = false;
        
        try {
          console.log("‚ñ∂Ô∏è Starting TTS playback with fade-in...");
          audioPlayPromise = audio.play();
          await audioPlayPromise;
          
          // –ü–ª–∞–≤–Ω–æ –∑–±—ñ–ª—å—à—É—î–º–æ –≥—É—á–Ω—ñ—Å—Ç—å –ø—Ä–æ—Ç—è–≥–æ–º 200ms
          let currentVolume = 0.01;
          const targetVolume = 0.7;
          const fadeSteps = 10;
          const stepSize = (targetVolume - currentVolume) / fadeSteps;
          const stepInterval = 20; // 20ms –Ω–∞ –∫—Ä–æ–∫ = 200ms –∑–∞–≥–∞–ª–æ–º
          
          const fadeInterval = setInterval(() => {
            currentVolume += stepSize;
            if (currentVolume >= targetVolume) {
              audio.volume = targetVolume;
              clearInterval(fadeInterval);
              console.log("üîä TTS fade-in –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
            } else {
              audio.volume = currentVolume;
            }
          }, stepInterval);
          
        } catch (directPlayErr) {
          console.log("‚ùå Direct play failed, trying fallback:", directPlayErr);
          
          // –ú–µ—Ç–æ–¥ fallback –∑ —Ç–∏—Ö–∏–º –∑–≤—É–∫–æ–º –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó
          const silentAudio = new Audio('data:audio/wav;base64,UklGRigAAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQAAAAA=');
          silentAudio.volume = 0;
          try {
            await silentAudio.play();
            console.log("üîá Silent audio activation successful");
            
            // –ó–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è —Å—Ç–∞–±—ñ–ª—ñ–∑–∞—Ü—ñ—ó –ø–µ—Ä–µ–¥ —Å–ø—Ä–æ–±–æ—é TTS
            await new Promise(resolve => setTimeout(resolve, 100));
            
            // –°–ø—Ä–æ–±—É—î–º–æ TTS –∑–Ω–æ–≤—É –∑ fade-in
            audio.volume = 0.01;
            audioPlayPromise = audio.play();
            await audioPlayPromise;
            
            // –ü–ª–∞–≤–Ω–∏–π fade-in –ø—ñ—Å–ª—è fallback
            setTimeout(() => {
              let vol = 0.01;
              const fadeUp = setInterval(() => {
                vol += 0.07;
                if (vol >= 0.7) {
                  audio.volume = 0.7;
                  clearInterval(fadeUp);
                } else {
                  audio.volume = vol;
                }
              }, 20);
            }, 50);
            
            console.log("‚úÖ TTS audio play after silent activation with fade-in");
          } catch (silentErr) {
            console.log("üîá All audio activation methods failed:", silentErr);
            // –ü–æ–∫–∞–∑—É—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –±–µ–∑ –∑–≤—É–∫—É
            setTimeout(finish, displayDuration);
          }
        }
        
      } catch (err) {
        console.error("‚ùå TTS audio play promise rejected:", err);
        // –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏, –≤—Å–µ –æ–¥–Ω–æ –ø–æ–∫–∞–∑—É—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
        setTimeout(finish, displayDuration);
      }
    };
    
    // –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è —Å—Ç–∞–±—ñ–ª—ñ–∑–∞—Ü—ñ—ó –∞—É–¥—ñ–æ –æ–±'—î–∫—Ç—É –ø—ñ—Å–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö listeners
    setTimeout(() => {
      attemptPlay();
    }, 150);
  }, [donationsPaused, voiceName]);

  const enqueue = useCallback((p: EventPayload) => {
    console.log("üîÑ Enqueue called with payload:", p);
    queueRef.current.push(p);
    console.log("üìù Queue length after push:", queueRef.current.length);
    console.log("üéÆ Current playing state:", playingRef.current);
    console.log("‚è±Ô∏è Active timeout:", timeoutRef.current ? "Yes" : "No");
    
    // –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –≤—ñ–¥—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –Ü –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞
    if (!playingRef.current && !timeoutRef.current) {
      console.log("‚ñ∂Ô∏è Not currently playing and no timeout, calling playNext()");
      playNext();
    } else {
      console.log("‚è∏Ô∏è Already playing or timeout active, donation queued");
    }
  }, [playNext]);

  useEffect(() => {
    try {
      const url = new URL(window.location.href);
      setVoiceName(url.searchParams.get("voice") || "");
      setDebugMode(url.searchParams.get("debug") === "true");
    } catch (err) {
      console.error("Failed to read voice parameter", err);
    }
  }, []);

  useEffect(() => {
    const enable = () => {
      audioAllowedRef.current = true;
      setShowAudioPrompt(false);
      console.log("Audio playback enabled by user interaction");
      document.removeEventListener("click", enable);
      document.removeEventListener("keydown", enable);
    };
    
    // –°–ø—Ä–æ–±—É—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –¥–æ–∑–≤–æ–ª–∏—Ç–∏ –∞—É–¥—ñ–æ
    const tryAutoEnable = async () => {
      try {
        // –ü–µ—Ä–µ–≤—ñ—Ä–∏–º–æ —Ç–∏–ø –ø—Ä–∏—Å—Ç—Ä–æ—é/–±—Ä–∞—É–∑–µ—Ä–∞
        const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ||
                         window.innerWidth <= 768;
        const isOBS = navigator.userAgent.includes('CEF') || 
                      window.location.pathname.includes('/obs/') ||
                      document.referrer.includes('obs');
        
        if (isMobile || isOBS) {
          // –ù–∞ –º–æ–±—ñ–ª—å–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—è—Ö —Ç–∞ –≤ OBS –ø—Ä–æ—Å—Ç–æ –¥–æ–∑–≤–æ–ª—è—î–º–æ
          audioAllowedRef.current = true;
          console.log(`Audio automatically enabled (${isMobile ? 'mobile' : 'OBS'} device)`);
          return;
        }
        
                // –î–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö –±—Ä–∞—É–∑–µ—Ä—ñ–≤ - –∑–∞–≤–∂–¥–∏ –¥–æ–∑–≤–æ–ª—è—î–º–æ –∞—É–¥—ñ–æ
        // –û—Å–∫—ñ–ª—å–∫–∏ —Ü–µ OBS –≤—ñ–¥–∂–µ—Ç, –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –≤–∑–∞—î–º–æ–¥—ñ—î –∑ –Ω–∏–º –Ω–∞–ø—Ä—è–º—É
        
        // –°–ø—Ä–æ–±—É—î–º–æ –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ AudioContext
        try {
          const AudioContext = window.AudioContext || (window as any).webkitAudioContext;
          if (AudioContext) {
            const audioContext = new AudioContext();
            if (audioContext.state === 'suspended') {
              await audioContext.resume();
              console.log("üéõÔ∏è AudioContext resumed");
            }
          }
        } catch (contextErr) {
          console.log("üéõÔ∏è AudioContext activation failed:", contextErr);
        }
        
        audioAllowedRef.current = true;
        console.log("Audio force-enabled for OBS widget");
      } catch (err) {
        console.log("Audio setup error:", err);
        // –í —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏ –≤—Å–µ –æ–¥–Ω–æ –¥–æ–∑–≤–æ–ª—è—î–º–æ –∞—É–¥—ñ–æ –¥–ª—è OBS
        audioAllowedRef.current = true;
        console.log("Audio force-enabled despite error");
      }
    };
    
    tryAutoEnable();
    
    // –î–æ–¥–∞—Ç–∫–æ–≤–∏–π —Ñ–æ–ª–ª–±–µ–∫ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥–∏ –∑ –ø—Ä–æ–≥—Ä–∞–º–Ω–∏–º –∫–ª—ñ–∫–æ–º
    setTimeout(() => {
      if (!audioAllowedRef.current) {
        console.log("üîä Fallback: Creating programmatic click event");
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ–≥—Ä–∞–º–Ω–∏–π –∫–ª—ñ–∫
        const clickEvent = new MouseEvent('click', {
          bubbles: true,
          cancelable: true,
          view: window
        });
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π –µ–ª–µ–º–µ–Ω—Ç –¥–ª—è –∫–ª—ñ–∫—É
        const tempButton = document.createElement('button');
        tempButton.style.position = 'absolute';
        tempButton.style.top = '-1000px';
        tempButton.style.left = '-1000px';
        tempButton.style.width = '1px';
        tempButton.style.height = '1px';
        tempButton.style.opacity = '0';
        
        tempButton.addEventListener('click', async () => {
          console.log("üéØ Programmatic click event triggered");
          try {
            const silentAudio = new Audio('data:audio/wav;base64,UklGRigAAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQAAAAA=');
            silentAudio.volume = 0;
            await silentAudio.play();
            audioAllowedRef.current = true;
            setShowAudioPrompt(false);
            console.log("‚úÖ Programmatic audio activation successful");
          } catch (err) {
            console.log("‚ùå Programmatic audio activation failed:", err);
            audioAllowedRef.current = true;
          }
          document.body.removeChild(tempButton);
        });
        
        document.body.appendChild(tempButton);
        tempButton.dispatchEvent(clickEvent);
      }
    }, 2000);

    let es: EventSource;
    function connect() {
      setConnectionState("connecting");
      const streamParam = streamerId ? `&streamerId=${encodeURIComponent(streamerId)}` : '';
      es = new EventSource(`/api/stream?ts=${Date.now()}${streamParam}`);
      es.addEventListener("open", () => setConnectionState("connected"));
      es.addEventListener("error", (err) => {
        console.error("EventSource error", err);
        setConnectionState("error");
        es.close();
        // –û—á–∏—Å—Ç–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π reconnect —Ç–∞–π–º–µ—Ä
        if (reconnectTimeoutRef.current) {
          clearTimeout(reconnectTimeoutRef.current);
        }
        reconnectTimeoutRef.current = setTimeout(connect, 3000);
      });
      es.addEventListener("donation", (ev) => {
        try {
          console.log("üéØ Received donation event:", (ev as MessageEvent).data);
          const p: EventPayload = JSON.parse((ev as MessageEvent).data);
          console.log("üì¶ Parsed donation payload:", p);
          console.log("üéµ About to enqueue donation, current playing state:", playingRef.current);
          enqueue(p);
        } catch (err) {
          console.error("‚ùå Failed to handle donation event", err);
        }
      });

      // –ù–µ –æ–±—Ä–æ–±–ª—è—î–º–æ YouTube –ø–æ–¥—ñ—ó –≤ –∑–≤–∏—á–∞–π–Ω–æ–º—É –≤—ñ–¥–∂–µ—Ç—ñ
      es.addEventListener("youtube-video", (ev) => {
        console.log("üé¨ YouTube video event received in donation widget - ignoring");
        // YouTube –≤—ñ–¥–µ–æ –æ–±—Ä–æ–±–ª—è—é—Ç—å—Å—è –æ–∫—Ä–µ–º–æ —É YouTube –≤—ñ–¥–∂–µ—Ç—ñ
      });
    }
    connect();

    return () => {
      es.close();
      document.removeEventListener("click", enable);
      // –û—á–∏—Å—Ç–∏—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ —Ç–∞–π–º–µ—Ä–∏ –ø—Ä–∏ unmount
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
        timeoutRef.current = null;
      }
      if (reconnectTimeoutRef.current) {
        clearTimeout(reconnectTimeoutRef.current);
        reconnectTimeoutRef.current = null;
      }
    };
  }, [voiceName, streamerId, enqueue]);

  // –ü–µ—Ä—ñ–æ–¥–∏—á–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞–Ω –ø–∞—É–∑–∏ —Ç–∞ –≤—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —á–µ—Ä–≥—É –ø—Ä–∏ –ø–æ—Ç—Ä–µ–±—ñ
  useEffect(() => {
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É –ø–∞—É–∑–∏ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
    checkPauseState();

    // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –∫–æ–∂–Ω—ñ 3 —Å–µ–∫—É–Ω–¥–∏
    pauseCheckRef.current = setInterval(checkPauseState, 3000);

    return () => {
      if (pauseCheckRef.current) {
        clearInterval(pauseCheckRef.current);
        pauseCheckRef.current = null;
      }
    };
  }, [checkPauseState]);

  // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —á–µ—Ä–≥—É –∫–æ–ª–∏ –¥–æ–Ω–∞—Ç–∏ —Ä–æ–∑–ø–∞—É–∑–µ–Ω—ñ
  useEffect(() => {
    // –Ø–∫—â–æ –¥–æ–Ω–∞—Ç–∏ –±—É–ª–∏ —Ä–æ–∑–ø–∞—É–∑–µ–Ω—ñ —ñ —î —á–µ—Ä–≥–∞, –∞–ª–µ –Ω—ñ—á–æ–≥–æ –Ω–µ –≤—ñ–¥—Ç–≤–æ—Ä—é—î—Ç—å—Å—è - –∑–∞–ø—É—Å–∫–∞—î–º–æ —á–µ—Ä–≥—É
    if (!donationsPaused && !playingRef.current && !timeoutRef.current && queueRef.current.length > 0) {
      console.log("‚ñ∂Ô∏è Donations unpaused, resuming queue with", queueRef.current.length, "items");
      playNext();
    }
  }, [donationsPaused, playNext]);

  return (
    <div
      className="pointer-events-none fixed inset-0 select-none"
      style={{ background: "transparent" }}
      suppressHydrationWarning={true}
    >
      {/* –ù–µ–≤–∏–¥–∏–º–∞ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –∞—É–¥—ñ–æ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –Ω–∞—Ç–∏—Å–∫–∞—î—Ç—å—Å—è —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É */}
      <button
        ref={(btn) => {
          if (btn && !audioAllowedRef.current) {
            setTimeout(() => {
              console.log("üéØ Auto-clicking invisible button to activate audio");
              btn.click();
            }, 1000);
          }
        }}
        onClick={async () => {
          console.log("üîä Invisible button clicked - activating audio");
          try {
            // –í—ñ–¥—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏—Ö–∏–π –∑–≤—É–∫ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –∞—É–¥—ñ–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
            const silentAudio = new Audio('data:audio/wav;base64,UklGRigAAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQAAAAA=');
            silentAudio.volume = 0;
            await silentAudio.play();
            
            // –ê–∫—Ç–∏–≤—É—î–º–æ AudioContext
            const AudioContext = window.AudioContext || (window as any).webkitAudioContext;
            if (AudioContext) {
              const audioContext = new AudioContext();
              if (audioContext.state === 'suspended') {
                await audioContext.resume();
                console.log("üéõÔ∏è AudioContext resumed via button click");
              }
            }
            
            audioAllowedRef.current = true;
            setShowAudioPrompt(false);
            console.log("‚úÖ Audio activated successfully via invisible button");
          } catch (err) {
            console.error("‚ùå Audio activation failed:", err);
            audioAllowedRef.current = true; // –í—Å–µ –æ–¥–Ω–æ –¥–æ–∑–≤–æ–ª—è—î–º–æ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏
          }
        }}
        className="absolute top-0 left-0 w-1 h-1 opacity-0 pointer-events-auto"
        style={{ zIndex: -1 }}
        aria-hidden="true"
      >
        Audio Activation
      </button>
      {/* –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è */}
      {showAudioPrompt && (
        <div className="pointer-events-auto fixed top-4 right-4 z-50 space-y-2">
          <button
            onClick={() => {
              audioAllowedRef.current = true;
              setShowAudioPrompt(false);
              console.log("Audio enabled by button click");
            }}
            className="block w-full rounded-lg bg-blue-500 px-4 py-2 text-white shadow-lg hover:bg-blue-600 transition-colors"
          >
            üîä –£–≤—ñ–º–∫–Ω—É—Ç–∏ –∑–≤—É–∫
          </button>
          
          <button
            onClick={async () => {
              console.log("üß™ Testing TTS directly...");
              try {
                const testAudio = new Audio("/api/tts?text=—Ç–µ—Å—Ç%20LINEAR16%2048kHz&voice=uk-UA-Standard-A&quality=optimal");
                testAudio.volume = 0.5;
                
                testAudio.addEventListener("loadstart", () => console.log("üîÑ Test audio loading..."));
                testAudio.addEventListener("canplay", () => console.log("‚ñ∂Ô∏è Test audio ready"));
                testAudio.addEventListener("play", () => console.log("üéµ Test audio playing"));
                testAudio.addEventListener("error", (e) => console.error("‚ùå Test audio error:", e));
                
                await testAudio.play();
                console.log("‚úÖ Test TTS played successfully");
              } catch (err) {
                console.error("‚ùå Test TTS failed:", err);
              }
            }}
            className="block w-full rounded-lg bg-purple-500 px-4 py-2 text-white shadow-lg hover:bg-purple-600 transition-colors"
          >
            üß™ –¢–µ—Å—Ç TTS
          </button>
        </div>
      )}

      {/* –î—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è */}
      {debugMode && (
        <div className="pointer-events-auto fixed top-4 left-4 z-50 bg-black/80 text-white p-4 rounded text-sm max-w-xs">
          <div><strong>Debug Info:</strong></div>
          <div>Audio Allowed: {audioAllowedRef.current ? "‚úÖ" : "‚ùå"}</div>
          <div>Connection: {connectionState}</div>
          <div>Voice: {voiceName}</div>
          <div>Queue: {queueRef.current.length}</div>
          <div>Playing: {playingRef.current ? "Yes" : "No"}</div>
          <div>Visible: {visible ? "Yes" : "No"}</div>
          <div>Show Audio Prompt: {showAudioPrompt ? "Yes" : "No"}</div>
          
          <div className="mt-2 space-y-1">
            <div className="text-xs text-gray-300 mb-1">üéµ TTS Quality Tests (LINEAR16 48kHz):</div>
            
            {["optimal", "high", "fast"].map((quality) => (
              <button
                key={quality}
                onClick={() => {
                  console.log(`üß™ Testing TTS quality: ${quality}`);
                  const qualityText = quality === "optimal" ? "–æ–ø—Ç–∏–º–∞–ª—å–Ω–∞ LINEAR16 48kHz" : 
                                    quality === "high" ? "–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ LINEAR16 48kHz" : 
                                    "—à–≤–∏–¥–∫–∞ MP3 16kHz";
                  const testAudio = new Audio(`/api/tts?text=${encodeURIComponent(`–¢–µ—Å—Ç ${qualityText} –∑–≤—É–∫—É`)}&voice=uk-UA-Standard-A&quality=${quality}`);
                  testAudio.volume = 0.7;
                  testAudio.addEventListener("loadstart", () => console.log(`üîÑ ${quality} loading...`));
                  testAudio.addEventListener("canplay", () => console.log(`‚ñ∂Ô∏è ${quality} can play`));
                  testAudio.addEventListener("play", () => console.log(`üéµ ${quality} playing`));
                  testAudio.addEventListener("error", (e) => console.error(`‚ùå ${quality} error:`, e));
                  testAudio.play()
                    .then(() => console.log(`‚úÖ ${quality} TTS test successful`))
                    .catch(err => console.error(`‚ùå ${quality} TTS test failed:`, err));
                }}
                className={`block w-full px-2 py-1 rounded text-xs mb-1 ${
                  quality === "optimal" ? "bg-green-600 hover:bg-green-700" :
                  quality === "high" ? "bg-blue-600 hover:bg-blue-700" :
                  "bg-orange-600 hover:bg-orange-700"
                }`}
              >
                {quality === "optimal" && "üéØ Optimal (LINEAR16 48kHz)"}
                {quality === "high" && "üèÜ High (LINEAR16 48kHz)"}
                {quality === "fast" && "‚ö° Fast (MP3 16kHz)"}
              </button>
            ))}
            
            <button
              onClick={() => {
                console.log("üéØ Simulating donation manually");
                const fakeDonation: EventPayload = {
                  identifier: "manual-test-" + Date.now(),
                  nickname: "TestUser",
                  message: "Manual test message",
                  amount: 100,
                  createdAt: new Date().toISOString()
                };
                console.log("üì¶ Fake donation payload:", fakeDonation);
                enqueue(fakeDonation);
              }}
              className="block w-full bg-green-600 hover:bg-green-700 px-2 py-1 rounded text-xs"
            >
              üéØ Simulate Donation
            </button>
          </div>
        </div>
      )}

      {/* –ë–∞–∑–æ–≤–µ –¥–æ–Ω–∞—Ç–Ω–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è - GitHub Repository State */}
      {visible && data && (
        <div className="fixed inset-0 flex items-center justify-center z-20">
          <div className="bg-white rounded-lg shadow-lg p-8 max-w-md w-full mx-4">
            
            {/* –ù—ñ–∫–Ω–µ–π–º */}
            <div className="text-center mb-4">
              <h3 className="text-2xl font-bold text-gray-800">
                {data.nickname}
              </h3>
            </div>

            {/* –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è */}
            <div className="text-center mb-6">
              <p className="text-gray-600 text-lg leading-relaxed">
                {data.message.length > 200 ? data.message.substring(0, 200) + '...' : data.message}
              </p>
            </div>

            {/* –°—É–º–∞ */}
            <div className="text-center">
              <div className="text-4xl font-bold text-green-600">
                {Math.round(data.amount)}‚Ç¥
              </div>
            </div>
            
          </div>
        </div>
      )}

    </div>
  );
}
