interface Client {
  id: number;
  controller: ReadableStreamDefaultController;
  timer?: ReturnType<typeof setInterval>;
  streamerId?: string | null; // –§—ñ–ª—å—Ç—Ä –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Å—Ç—Ä—ñ–º–µ—Ä—É, null = –≤—Å—ñ –¥–æ–Ω–∞—Ç–∏
}

export interface DonationPayload {
  identifier: string;
  nickname: string;
  message: string;
  amount: number;
  createdAt: string;
  monoComment?: string;
  jarTitle?: string; // –ù–∞–∑–≤–∞ –±–∞–Ω–∫–∏ –Ω–∞ –º–æ–º–µ–Ω—Ç –¥–æ–Ω–∞—Ç—É
  youtubeUrl?: string | null; // YouTube URL –¥–ª—è –≤—ñ–¥–∂–µ—Ç—É
  streamerId: string; // ID —Å—Ç—Ä—ñ–º–µ—Ä–∞ –¥–ª—è —è–∫–æ–≥–æ –¥–æ–Ω–∞—Ç
}

interface SseGlobal {
  __sseClients?: Client[];
  __sseIdCounter?: number;
}

const sseGlobal = globalThis as typeof globalThis & SseGlobal;
sseGlobal.__sseClients ??= [];
sseGlobal.__sseIdCounter ??= 1;

const clients = sseGlobal.__sseClients;

export function addClient(streamerId?: string | null) {
  const id = sseGlobal.__sseIdCounter!;
  sseGlobal.__sseIdCounter! += 1;
  
  console.log(`üîå Adding SSE client ${id}, streamerId: ${streamerId}, total clients: ${clients.length + 1}`);
  
  const stream = new ReadableStream({
    start(controller) {
      const client: Client = { id, controller, streamerId };
      clients.push(client);
      console.log(`‚úÖ Client ${id} connected successfully`);
      
      const encoder = new TextEncoder();
      function send(event: string, data: string) {
        try {
          controller.enqueue(encoder.encode(`event: ${event}\ndata: ${data}\n\n`));
        } catch (err) {
          console.error(`‚ùå Failed to send ${event} to client ${id}:`, err);
          throw err;
        }
      }
      
      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π ping
      send("ping", "ok");
      console.log(`üì° Initial ping sent to client ${id}`);
      
      // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —Ä–µ–≥—É–ª—è—Ä–Ω—ñ ping'–∏
      client.timer = setInterval(() => {
        try {
          send("ping", String(Date.now()));
        } catch (err) {
          console.error(`‚ùå Failed to send ping to client ${id}:`, err);
          // –í–∏–¥–∞–ª—è—î–º–æ –∫–ª—ñ—î–Ω—Ç–∞ —è–∫—â–æ ping –Ω–µ –≤–¥–∞–≤—Å—è
          const index = clients.findIndex((c) => c.id === id);
          if (index !== -1) {
            const [deadClient] = clients.splice(index, 1);
            if (deadClient.timer) clearInterval(deadClient.timer);
            console.log(`üóëÔ∏è Removed dead client ${id}`);
          }
        }
      }, 15000);
    },
    cancel() {
      console.log(`üîå Client ${id} disconnected`);
      const index = clients.findIndex((c) => c.id === id);
      if (index === -1) {
        console.log(`‚ö†Ô∏è Client ${id} not found for removal`);
        return;
      }
      const [client] = clients.splice(index, 1);
      if (client.timer) clearInterval(client.timer);
      console.log(`‚úÖ Client ${id} removed, remaining clients: ${clients.length}`);
    },
  });
  return { id, stream };
}

export function broadcastDonation(payload: DonationPayload, eventType?: string) {
  console.log(`Broadcasting donation to ${clients.length} clients:`, payload);
  
  // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –ø–æ–¥—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ YouTube URL –∞–±–æ –ø–µ—Ä–µ–¥–∞–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
  const finalEventType = eventType || (payload.youtubeUrl ? 'youtube-video' : 'donation');
  
  const encoded = new TextEncoder().encode(
    `event: ${finalEventType}\ndata: ${JSON.stringify(payload)}\n\n`,
  );
  
  let sentCount = 0;
  clients.forEach((c, index) => {
    try {
      // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤: —è–∫—â–æ streamerId –Ω–µ –≤–∫–∞–∑–∞–Ω - –ø–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ –¥–æ–Ω–∞—Ç–∏,
      // —è–∫—â–æ –≤–∫–∞–∑–∞–Ω - –ø–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –¥–ª—è —Ü—å–æ–≥–æ —Å—Ç—Ä—ñ–º–µ—Ä–∞
      const shouldSend = c.streamerId === null || c.streamerId === payload.streamerId;
      console.log(`Client ${index}: streamerId=${c.streamerId}, shouldSend=${shouldSend}, eventType=${finalEventType}`);
      
      if (shouldSend) {
        c.controller.enqueue(encoded);
        sentCount++;
      }
    } catch (err) {
      console.error("Failed to broadcast donation", err);
    }
  });
  
  console.log(`Sent ${finalEventType} event to ${sentCount}/${clients.length} clients`);
}
