type Client={id:number;controller:ReadableStreamDefaultController;interval?:any}; let clients:Client[]=[]; let idCounter=1;
export const addClient=()=>{const id=idCounter++;const stream=new ReadableStream({start(controller){const c:Client={id,controller};clients.push(c);const enc=new TextEncoder();const send=(e:string,d:string)=>controller.enqueue(enc.encode(`event: ${e}\ndata: ${d}\n\n`));send('ping','ok');c.interval=setInterval(()=>{try{send('ping',String(Date.now()))}catch{}},15000)},cancel(){const c=clients.find(x=>x.id===id);if(c?.interval)clearInterval(c.interval);clients=clients.filter(x=>x.id!==id)}});return{id,stream}};
export const broadcastDonation=(payload:any)=>{const encoded=new TextEncoder().encode(`event: donation\ndata: ${JSON.stringify(payload)}\n\n`);clients.forEach(c=>{try{c.controller.enqueue(encoded)}catch{}})};
