#!/usr/bin/env tsx

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è —ñ—Å–Ω—É—é—á–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤ Monobank –≤ –ë–î
 * –ó–∞–ø—É—Å–∫–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –ø—ñ—Å–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ENCRYPTION_KEY
 */

import { prisma } from "../lib/db";
import { encryptToken, isEncryptedToken } from "../lib/encryption";

async function encryptExistingTokens() {
  console.log("üîê –ü–æ—á–∏–Ω–∞—é —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è —ñ—Å–Ω—É—é—á–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤...");
  
  try {
    // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑ —Ç–æ–∫–µ–Ω–∞–º–∏
    const settings = await prisma.monobankSettings.findMany({
      where: {
        token: {
          not: null
        }
      }
    });
    
    console.log(`üìä –ó–Ω–∞–π–¥–µ–Ω–æ ${settings.length} –∑–∞–ø–∏—Å—ñ–≤ –∑ —Ç–æ–∫–µ–Ω–∞–º–∏`);
    
    let encryptedCount = 0;
    let skippedCount = 0;
    
    for (const setting of settings) {
      if (!setting.token) continue;
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ç–æ–∫–µ–Ω –≤–∂–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–π
      if (isEncryptedToken(setting.token)) {
        console.log(`‚è≠Ô∏è  –¢–æ–∫–µ–Ω –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${setting.userId} –≤–∂–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–π`);
        skippedCount++;
        continue;
      }
      
      // –®–∏—Ñ—Ä—É—î–º–æ —Ç–æ–∫–µ–Ω
      const encryptedToken = encryptToken(setting.token);
      
      // –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–ø–∏—Å –≤ –ë–î
      await prisma.monobankSettings.update({
        where: { userId: setting.userId },
        data: { token: encryptedToken }
      });
      
      console.log(`‚úÖ –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${setting.userId}`);
      encryptedCount++;
    }
    
    console.log(`\nüéâ –®–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!`);
    console.log(`üìà –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ: ${encryptedCount} —Ç–æ–∫–µ–Ω—ñ–≤`);
    console.log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ (–≤–∂–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ñ): ${skippedCount} —Ç–æ–∫–µ–Ω—ñ–≤`);
    
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—ñ —Ç–æ–∫–µ–Ω—ñ–≤:", error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π ENCRYPTION_KEY
if (!process.env.ENCRYPTION_KEY) {
  console.error("‚ùå ENCRYPTION_KEY –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π –≤ environment variables");
  console.log("üí° –î–æ–¥–∞–π—Ç–µ ENCRYPTION_KEY –¥–æ .env —Ñ–∞–π–ª—É:");
  console.log("   ENCRYPTION_KEY=–≤–∞—à_64_—Å–∏–º–≤–æ–ª—å–Ω–∏–π_hex_–∫–ª—é—á");
  process.exit(1);
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è
encryptExistingTokens();

