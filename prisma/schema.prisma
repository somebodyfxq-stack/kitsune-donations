generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model DonationIntent {
  id         Int             @id @default(autoincrement())
  identifier String          @unique
  nickname   String
  message    String
  amount     Int
  createdAt  DateTime        @default(now())
  streamerId String
  youtubeUrl String?
  events     DonationEvent[] @relation("IntentEvents")
  streamer   User            @relation(fields: [streamerId], references: [id], onDelete: Cascade)

  @@index([streamerId, createdAt])
  @@index([streamerId])
}

model DonationEvent {
  id          Int            @id @default(autoincrement())
  identifier  String
  nickname    String
  message     String
  amount      Int
  monoComment String
  createdAt   DateTime       @default(now())
  streamerId  String
  jarTitle    String?
  youtubeUrl  String?
  cleared     Boolean        @default(false)
  videoStatus String?        @default("pending") // waiting_for_tts, pending, playing, completed, skipped
  intent      DonationIntent @relation("IntentEvents", fields: [identifier], references: [identifier])
  streamer    User           @relation(fields: [streamerId], references: [id], onDelete: Cascade)

  @@unique([identifier, createdAt])
  @@index([identifier])
  @@index([streamerId, createdAt])
  @@index([streamerId])
}

model Setting {
  key   String @id
  value String
}

model User {
  id               String            @id @default(cuid())
  name             String?           @unique
  email            String?           @unique
  emailVerified    DateTime?
  image            String?
  role             String            @default("streamer")
  accounts         Account[]
  donationEvents   DonationEvent[]
  donationIntents  DonationIntent[]
  monobankSettings MonobankSettings?
  sessions         Session[]
  youtubeSettings  YouTubeSettings?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MonobankSettings {
  userId          String  @id
  token           String?
  jarId           String?
  jarTitle        String?
  jarGoal         Int?
  webhookId       String? @unique
  webhookUrl      String?
  webhookSecret   String?
  obsWidgetToken  String? @unique
  donationsPaused Boolean @default(false)
  user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model YouTubeSettings {
  userId             String  @id
  maxDurationMinutes Int     @default(5)
  volume             Int     @default(50)
  showClipTitle      Boolean @default(true)
  showDonorName      Boolean @default(true)
  minLikes           Int     @default(0)
  minViews           Int     @default(0)
  minComments        Int     @default(0)
  showImmediately    Boolean @default(false)
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}
