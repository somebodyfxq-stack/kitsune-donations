datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model DonationIntent {
  id         Int             @id @default(autoincrement())
  identifier String          @unique
  nickname   String
  message    String
  amount     Int
  createdAt  DateTime        @default(now())
  streamerId String
  streamer   User            @relation(fields: [streamerId], references: [id], onDelete: Cascade)
  events     DonationEvent[] @relation("IntentEvents")
}

model DonationEvent {
  id          Int             @id @default(autoincrement())
  identifier  String
  nickname    String
  message     String
  amount      Int
  monoComment String
  createdAt   DateTime        @default(now())
  intent      DonationIntent? @relation("IntentEvents", fields: [identifier], references: [identifier])

  @@unique([identifier, createdAt])
  @@index([identifier])
}

model Setting {
  key   String @id
  value String
}

model User {
  id               String            @id @default(cuid())
  name             String?           @unique
  email            String?           @unique
  emailVerified    DateTime?
  image            String?
  role             String            @default("streamer")
  accounts         Account[]
  sessions         Session[]
  monobankSettings MonobankSettings?
  donationIntents  DonationIntent[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MonobankSettings {
  userId     String  @id
  token      String?
  jarId      String?
  webhookId  String? @unique
  webhookUrl String?
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}
